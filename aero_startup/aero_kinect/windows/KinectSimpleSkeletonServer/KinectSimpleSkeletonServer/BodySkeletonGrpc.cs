// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: body_skeleton.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Bodyskeleton {
  public static class BodySkeleton
  {
    static readonly string __ServiceName = "bodyskeleton.BodySkeleton";

    static readonly Marshaller<global::Bodyskeleton.User> __Marshaller_User = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bodyskeleton.User.Parser.ParseFrom);
    static readonly Marshaller<global::Bodyskeleton.Joint> __Marshaller_Joint = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Bodyskeleton.Joint.Parser.ParseFrom);

    static readonly Method<global::Bodyskeleton.User, global::Bodyskeleton.User> __Method_GetUsers = new Method<global::Bodyskeleton.User, global::Bodyskeleton.User>(
        MethodType.Unary,
        __ServiceName,
        "GetUsers",
        __Marshaller_User,
        __Marshaller_User);

    static readonly Method<global::Bodyskeleton.User, global::Bodyskeleton.Joint> __Method_GetSkeleton = new Method<global::Bodyskeleton.User, global::Bodyskeleton.Joint>(
        MethodType.ServerStreaming,
        __ServiceName,
        "GetSkeleton",
        __Marshaller_User,
        __Marshaller_Joint);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Bodyskeleton.Proto.BodySkeleton.Descriptor.Services[0]; }
    }

    // client interface
    public interface IBodySkeletonClient
    {
      global::Bodyskeleton.User GetUsers(global::Bodyskeleton.User request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Bodyskeleton.User GetUsers(global::Bodyskeleton.User request, CallOptions options);
      AsyncUnaryCall<global::Bodyskeleton.User> GetUsersAsync(global::Bodyskeleton.User request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Bodyskeleton.User> GetUsersAsync(global::Bodyskeleton.User request, CallOptions options);
      AsyncServerStreamingCall<global::Bodyskeleton.Joint> GetSkeleton(global::Bodyskeleton.User request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::Bodyskeleton.Joint> GetSkeleton(global::Bodyskeleton.User request, CallOptions options);
    }

    // server-side interface
    public interface IBodySkeleton
    {
      Task<global::Bodyskeleton.User> GetUsers(global::Bodyskeleton.User request, ServerCallContext context);
      Task GetSkeleton(global::Bodyskeleton.User request, IServerStreamWriter<global::Bodyskeleton.Joint> responseStream, ServerCallContext context);
    }

    // client stub
    public class BodySkeletonClient : ClientBase, IBodySkeletonClient
    {
      public BodySkeletonClient(Channel channel) : base(channel)
      {
      }
      public global::Bodyskeleton.User GetUsers(global::Bodyskeleton.User request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetUsers, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Bodyskeleton.User GetUsers(global::Bodyskeleton.User request, CallOptions options)
      {
        var call = CreateCall(__Method_GetUsers, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Bodyskeleton.User> GetUsersAsync(global::Bodyskeleton.User request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetUsers, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Bodyskeleton.User> GetUsersAsync(global::Bodyskeleton.User request, CallOptions options)
      {
        var call = CreateCall(__Method_GetUsers, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncServerStreamingCall<global::Bodyskeleton.Joint> GetSkeleton(global::Bodyskeleton.User request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetSkeleton, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::Bodyskeleton.Joint> GetSkeleton(global::Bodyskeleton.User request, CallOptions options)
      {
        var call = CreateCall(__Method_GetSkeleton, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IBodySkeleton serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_GetUsers, serviceImpl.GetUsers)
          .AddMethod(__Method_GetSkeleton, serviceImpl.GetSkeleton).Build();
    }

    // creates a new client
    public static BodySkeletonClient NewClient(Channel channel)
    {
      return new BodySkeletonClient(channel);
    }

  }
}
#endregion
