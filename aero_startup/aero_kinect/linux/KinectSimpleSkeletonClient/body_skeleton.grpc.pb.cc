// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: body_skeleton.proto

#include "body_skeleton.pb.h"
#include "body_skeleton.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace bodyskeleton {

static const char* BodySkeleton_method_names[] = {
  "/bodyskeleton.BodySkeleton/GetUsers",
  "/bodyskeleton.BodySkeleton/GetSkeleton",
};

std::unique_ptr< BodySkeleton::Stub> BodySkeleton::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< BodySkeleton::Stub> stub(new BodySkeleton::Stub(channel));
  return stub;
}

BodySkeleton::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_GetUsers_(BodySkeleton_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSkeleton_(BodySkeleton_method_names[1], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status BodySkeleton::Stub::GetUsers(::grpc::ClientContext* context, const ::bodyskeleton::User& request, ::bodyskeleton::User* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetUsers_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bodyskeleton::User>* BodySkeleton::Stub::AsyncGetUsersRaw(::grpc::ClientContext* context, const ::bodyskeleton::User& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bodyskeleton::User>(channel_.get(), cq, rpcmethod_GetUsers_, context, request);
}

::grpc::ClientReader< ::bodyskeleton::Joint>* BodySkeleton::Stub::GetSkeletonRaw(::grpc::ClientContext* context, const ::bodyskeleton::User& request) {
  return new ::grpc::ClientReader< ::bodyskeleton::Joint>(channel_.get(), rpcmethod_GetSkeleton_, context, request);
}

::grpc::ClientAsyncReader< ::bodyskeleton::Joint>* BodySkeleton::Stub::AsyncGetSkeletonRaw(::grpc::ClientContext* context, const ::bodyskeleton::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::bodyskeleton::Joint>(channel_.get(), cq, rpcmethod_GetSkeleton_, context, request, tag);
}

BodySkeleton::AsyncService::AsyncService() : ::grpc::AsynchronousService(BodySkeleton_method_names, 2) {}

BodySkeleton::Service::~Service() {
  delete service_;
}

::grpc::Status BodySkeleton::Service::GetUsers(::grpc::ServerContext* context, const ::bodyskeleton::User* request, ::bodyskeleton::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void BodySkeleton::AsyncService::RequestGetUsers(::grpc::ServerContext* context, ::bodyskeleton::User* request, ::grpc::ServerAsyncResponseWriter< ::bodyskeleton::User>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status BodySkeleton::Service::GetSkeleton(::grpc::ServerContext* context, const ::bodyskeleton::User* request, ::grpc::ServerWriter< ::bodyskeleton::Joint>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void BodySkeleton::AsyncService::RequestGetSkeleton(::grpc::ServerContext* context, ::bodyskeleton::User* request, ::grpc::ServerAsyncWriter< ::bodyskeleton::Joint>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* BodySkeleton::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      BodySkeleton_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BodySkeleton::Service, ::bodyskeleton::User, ::bodyskeleton::User>(
          std::mem_fn(&BodySkeleton::Service::GetUsers), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      BodySkeleton_method_names[1],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< BodySkeleton::Service, ::bodyskeleton::User, ::bodyskeleton::Joint>(
          std::mem_fn(&BodySkeleton::Service::GetSkeleton), this)));
  return service_;
}


}  // namespace bodyskeleton

