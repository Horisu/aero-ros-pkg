(defun testaero ()
  (load "package://aero_ros_bridge/euslisp/aero-upper-interface.l")
  (aero-upper-init)
  (objects *aero-upper*)
)

(defun moveRobot (&optional (time 3000))
      (send *ri* :angle-vector (send *aero-upper* :angle-vector) time))

(defun test-aero-motion ()
  (send *aero-upper* :rarm :shoulder-p :joint-angle 80)
  (send *aero-upper* :larm :shoulder-p :joint-angle -80)
  (send *aero-upper* :rarm :elbow-p :joint-angle -80)
  (send *aero-upper* :larm :elbow-p :joint-angle -80)
  (send *irtviewer* :draw-objects)
  (moveRobot)
  (send *ri* :wait-interpolation "or")

  (send *aero-upper* :rarm :shoulder-p :joint-angle 0)
  (send *aero-upper* :larm :shoulder-p :joint-angle 0)
  (send *irtviewer* :draw-objects)
  (moveRobot)
  (send *ri* :wait-interpolation "or")  

  (send *aero-upper* :rarm :shoulder-r :joint-angle -80)
  (send *aero-upper* :larm :shoulder-r :joint-angle 80)
  (send *irtviewer* :draw-objects)
  (moveRobot)
  (send *ri* :wait-interpolation "or")  
  
  (send *aero-upper* :rarm :shoulder-r :joint-angle 0)
  (send *aero-upper* :larm :shoulder-r :joint-angle 0)
  (send *irtviewer* :draw-objects)
  (moveRobot)
  (send *ri* :wait-interpolation "or")  
  
  (send *aero-upper* :rarm :shoulder-y :joint-angle -80)
  (send *aero-upper* :larm :shoulder-y :joint-angle 80)
  (send *irtviewer* :draw-objects)
  (moveRobot)
  (send *ri* :wait-interpolation "or")  
  
  (send *aero-upper* :rarm :shoulder-y :joint-angle 0)
  (send *aero-upper* :larm :shoulder-y :joint-angle 0)
  (send *irtviewer* :draw-objects)
  (moveRobot)
  (send *ri* :wait-interpolation "or")  
  
  (send *aero-upper* :rarm :wrist-y :joint-angle -80)
  (send *aero-upper* :larm :wrist-y :joint-angle 80)
  (send *irtviewer* :draw-objects)
  (moveRobot)
  (send *ri* :wait-interpolation "or")  
  
  (send *aero-upper* :rarm :wrist-y :joint-angle 0)
  (send *aero-upper* :larm :wrist-y :joint-angle 0)
  (send *irtviewer* :draw-objects)
  (moveRobot)
  (send *ri* :wait-interpolation "or")  
  
  (send *aero-upper* :rarm :wrist-r :joint-angle -80)
  (send *aero-upper* :larm :wrist-r :joint-angle 80)
  (send *irtviewer* :draw-objects)
  (moveRobot)
  (send *ri* :wait-interpolation "or")  
  
  (send *aero-upper* :rarm :wrist-r :joint-angle 0)
  (send *aero-upper* :larm :wrist-r :joint-angle 0)
  (send *irtviewer* :draw-objects)
  (moveRobot)
  (send *ri* :wait-interpolation "or")  
  
  (send *aero-upper* :rarm :wrist-p :joint-angle 80)
  (send *aero-upper* :larm :wrist-p :joint-angle 80)
  (send *irtviewer* :draw-objects)
  (moveRobot)
  (send *ri* :wait-interpolation "or")  
  
  (send *aero-upper* :rarm :wrist-p :joint-angle 0)
  (send *aero-upper* :larm :wrist-p :joint-angle 0)
  (send *irtviewer* :draw-objects)
  (moveRobot)
  (send *ri* :wait-interpolation "or")  

  (send *aero-upper* :hand :arms :joint-angle 50)
  (send *irtviewer* :draw-objects)
  (moveRobot)
  (send *ri* :wait-interpolation "or")
  (send *aero-upper* :hand :larm :joint-angle -50)
  (send *aero-upper* :hand :rarm :joint-angle -50)
  (send *irtviewer* :draw-objects)
  (moveRobot)
  (send *ri* :wait-interpolation "or")
  (send *aero-upper* :hand :arms :reset-pose)
  (send *irtviewer* :draw-objects)
  (moveRobot)
  (send *ri* :wait-interpolation "or")
  
  
  (send *aero-upper* :reset-pose)
  (send *irtviewer* :draw-objects)
  (moveRobot)

)



