(load "package://drc_task_common/euslisp/drc-testbed-models.l")
(load "package://aero_ros_bridge/euslisp/aero-interface.l")

(defun make-drc-testbed-models-with-aero ()
  (aero-init)
  (send *aero* :fix-leg-to-coords (make-coords))
  (send *aero* :translate (float-vector -1000 500 0))
  ;; Generate models                 
  (make-drc-door)
  (make-drc-hose-plug)
  (make-drc-hose-wall)
  (make-drc-stair)
  (make-drc-drill-wall)
  (make-drc-terrain)
  (make-drc-valve)
  (let ((sb (make-drc-surprise-task-box)))
    (send-all sb :translate (float-vector 12000 0 0) :world))
  ;; Align models               
  (send *stair* :translate (float-vector 8000 0 0) :world)
  (send *door* :translate (float-vector 0 0 0) :world)
  (send *hose-wall* :rotate (deg2rad -45) :z)
  (send *hose-wall* :translate (float-vector 4000 -3000 0) :world)
  (send *drill-wall* :rotate -pi/2 :z)
  (send *drill-wall* :translate (float-vector 2000 -3500 0) :world)
  (send *terrain* :translate (float-vector 5000 -1000 0) :world)
  (send *drc-valve* :rotate -pi/2 :y)
  (send *drc-valve* :rotate (deg2rad -135) :x)
  (send *drc-valve* :translate (float-vector 2000 -3500 1130) :world)
  (send *drc-valve* :translate (float-vector 0 (/ 1210 -2.0) (+ -110 -400)))
  ;; Display
  (objects (list *aero* *hose-plug* *hose-wall* *stair* *door* *drill-wall* *terrain* *drc-valve*
                 *surprise-task-shower* *surprise-task-button* *surprise-task-lever* *surprise-task-rope*))
  )